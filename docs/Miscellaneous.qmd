

## Export a subset of geographic columns 

The need: you need to create a MoH export with only the admin 3 and 4 columns.

The problem: in the **set-up file** *Dictionary* sheet, geographic columns are represented by one *"geo" variable*, that is translated in 4 columns in the generated **linelist file** (admin 1, 2, 3 and 4) with cascading dropdown menus. In the **set-up file**, if you indicate that this "geo" variable should be exported for a given export, the linelist export will contain the 4 admin levels columns (more if you choose to export p-codes, see the "*Exports*" sheet options in the **set-up file**).

The solution: you need to derive individual columns from the automatically created "*geo*" columns, and exports these only to your MoH export.

How does it works? The "*geo*" variable **name** is used to automatically name the 4 level columns in the linelist. For example, if the "*geo*" variable in the **set-up file** is called "*origin*", four columns will be created in the linelist: adm1\_*origin*, adm2\_*origin*, adm3\_*origin*, adm4\_*origin*.

**Even though these columns do not appear in the setup file, they will be created in the linelist!** This means that you can reference them and use them in formulas in other parts of the *Dictionary* sheet, like you would do for any other variable defined in that sheet.

An example, with a column named "residence": the green variable is the "geo" variable. It triggers the creation of 4 columns in the linelist. You will export it for a MSF export, but maybe you don't need to export all the fours columns in an MoH export. The blue variables are calculated variables (formula control) that refer to the geo columns that are automatically created. You can decide for each of these individually to export them or not in a given export.

![](imgs/im-123-export-a-subset-of-geographic-columns.png){fig-align="center"}

Because the variable do not appear in the **setup file**, the *checkRep* *check* will raise a warning, saying that the formula will fail (because it references a variable that seem not to exist), but in this specific instance, it is wrong, **the columns will be created**, and the formula will thus work in the linelist.

![](imgs/im-124-export-a-subset-of-geographic-columns.png){fig-align="center"}


## How to have several data entry sheets in a file


### Independent data tables

You just need to use different sheet names in the *Dictionary* sheet. Technically, a linelist with an "*Info*" sheet and a "*Patient linelist*" sheet already has two entry sheets, even if their format differs a bit.

You can of course have two entry sheets with independent 2 dimensions table. For example, patient level information on one sheet, and a table about bed occupancy on a second sheet, with no interaction between the two tables.


### Refer to data from another table

#### Refer to a single value

It is straightforward to use the values of **vlist1D** in a formula: just refer to the name of the variable in another formula^[remember these variables can take only one value!].

Example: sometimes the user wants a variable with the name of the site in the data, but since each individual file is used only in one site, it saves time for data encoders to enter the name of the facility in the *Info* sheet once, and then populate a calculated columns with this name in the *Patient linelist* sheet using the following formula:

> IF(ISBLANK(case_id), "", info_facility_name)

See the *Formula* sections of this document for more information

#### Link two tables

A more advanced case is when you have two tables, which should be linked at minima by a **key**. 

Example of a user case:

- one main data entry sheet with general patient data (*Patient linelist*)  
- another entry sheet with additional variables for a subset of patients (*e.g.* readmission variables or extensive lab testing).  


##### Make sure IDs match with *list_auto*

In such a case, the patients from the *Readmission* sheet sheet must match the patients from the *Patient linelist* sheet. 

You could ask data encoders to enter the patient ID manually in a free text column in the *Readmission* sheet, but this process increases the risk of typing error and thus of merging nightmare.

A safer way is to create a categorical variable in the *Readmission* sheet whose **dropdown menu** is populated by values present in the *case_id* column of the *Patient linelist* sheet. As the data encoder can only choose from existing patients from the *Patient linelist* sheet, the opportunity for encoding error and thus unmatched patients is greatly reduced.^[If data are exported in R or Stata, you will be able to merge/join them extremely easily with the two IDs variables.] 

![](imgs/im-130-list-auto.png){fig-align="center"}

See the *Control* and *Control details* sections of this document on *list_auto* for more information.


##### Propagate values from the other table with VALUE_OF

Once the *key* columns have been setup in both tables^[for example, a *case_id* column in the *Patient linelist* and a list_auto *readmission_id* column in the *Readmission* sheet], it might be desirable to bring some of the patient data in this table, to calculate new variables, or just to facilitate reading and understanding. 

For example, we might want to bring in the name and surname of the patient, without entering it again.

You can use the custom function VALUE_OF for that. It works sort of like a LOOKUP function, except we provide variable names, and it matches the value you need.

It takes three arguments, all **variable names**:

> VALUE_OF(*key_variable1*, *key_variable2*, *variable_values*)

> *key_variable1*: the list_auto in the current sheet (the key column that contains IDs)

> *key_variable2*: the source of the list_auto in the other sheet (the IDs from the main sheet)

> *variable_values*: the variable to take values to propagate from.

The function matches the values from columns *key_variable1* and *key_variable2*, and returns values from *variable_values* column at the corresponding row.


::: callout-warning
*key_variable2* and *variable_values* must be on the same sheet or the function will return nothing.
:::


::: callout-note
If the function finds more than two matches, it will return the values from the first match (the first line found).
:::


## Custom formulas

*EPIWEEK*: returns the week number.

*N*: count the number of lines, mostly used in the analyses

*DATE_RANGE*: range of a date column, mostly used in the global summary table

![](imgs/im-125-custom-formulas.png){fig-align="center"}
